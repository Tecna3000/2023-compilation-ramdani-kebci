/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.analysis;

import java.util.*;
import sc.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgramme(AProgramme node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecvarListedecvar(ADecvarListedecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideListedecvar(AVideListedecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListdecvarListedecvarbis(AListdecvarListedecvarbis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideListedecvarbis(AVideListedecvarbis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarDecvar(AVarDecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFoncDecvar(AFoncDecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVraiTypevar(AVraiTypevar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFauxTypevar(AFauxTypevar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANombreTypevar(ANombreTypevar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecfoncListedecfonc(ADecfoncListedecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideListedecfonc(AVideListedecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecfonc(ADecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeopTypeop(ATypeopTypeop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideTypeop(AVideTypeop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlocinst(ABlocinst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListinstListeinst(AListinstListeinst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideListeinst(AVideListeinst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstInst(AInstInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATanqueInst(ATanqueInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASiInst(ASiInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASisinonInst(ASisinonInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARetournInst(ARetournInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAppfoncInst(AAppfoncInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEcrireInst(AEcrireInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListexpListeexp(AListexpListeexp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideListeexp(AVideListeexp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListexpbisListeexpbis(AListexpbisListeexpbis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideListeexpbis(AVideListeexpbis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOuExp(AOuExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp2Exp(AExp2Exp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEtExp2(AEtExp2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp3Exp2(AExp3Exp2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEgaleExp3(AEgaleExp3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInfExp3(AInfExp3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp4Exp3(AExp4Exp3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusExp4(APlusExp4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMoinsExp4(AMoinsExp4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp5Exp4(AExp5Exp4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivExp5(ADivExp5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultExp5(AMultExp5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp6Exp5(AExp6Exp5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANonExp6(ANonExp6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp7Exp6(AExp7Exp6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpbExp7(AExpbExp7 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarExp7(AVarExp7 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANombreExp7(ANombreExp7 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAppelfoncExp7(AAppelfoncExp7 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALireExp7(ALireExp7 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVraiExp7(AVraiExp7 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFauxExp7(AFauxExp7 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdbVar(AIdbVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEspaces(TEspaces node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentaire(TCommentaire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVirgule(TVirgule node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNombre(TNombre node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCo(TCo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCf(TCf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPo(TPo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPf(TPf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAco(TAco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAcf(TAcf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPvirgule(TPvirgule node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTantque(TTantque node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFaire(TFaire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSi(TSi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAlors(TAlors node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSinon(TSinon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRetourne(TRetourne node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEcrire(TEcrire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOu(TOu node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEt(TEt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLire(TLire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVrai(TVrai node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFaux(TFaux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEgale(TEgale node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInf(TInf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMoins(TMoins node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNon(TNon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEntier(TEntier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBoolean(TBoolean node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
