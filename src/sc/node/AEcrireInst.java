/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AEcrireInst extends PInst
{
    private TEcrire _ecrire_;
    private TPo _po_;
    private PExp _exp_;
    private TPf _pf_;
    private TPvirgule _pvirgule_;

    public AEcrireInst()
    {
        // Constructor
    }

    public AEcrireInst(
        @SuppressWarnings("hiding") TEcrire _ecrire_,
        @SuppressWarnings("hiding") TPo _po_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TPf _pf_,
        @SuppressWarnings("hiding") TPvirgule _pvirgule_)
    {
        // Constructor
        setEcrire(_ecrire_);

        setPo(_po_);

        setExp(_exp_);

        setPf(_pf_);

        setPvirgule(_pvirgule_);

    }

    @Override
    public Object clone()
    {
        return new AEcrireInst(
            cloneNode(this._ecrire_),
            cloneNode(this._po_),
            cloneNode(this._exp_),
            cloneNode(this._pf_),
            cloneNode(this._pvirgule_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEcrireInst(this);
    }

    public TEcrire getEcrire()
    {
        return this._ecrire_;
    }

    public void setEcrire(TEcrire node)
    {
        if(this._ecrire_ != null)
        {
            this._ecrire_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ecrire_ = node;
    }

    public TPo getPo()
    {
        return this._po_;
    }

    public void setPo(TPo node)
    {
        if(this._po_ != null)
        {
            this._po_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._po_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TPf getPf()
    {
        return this._pf_;
    }

    public void setPf(TPf node)
    {
        if(this._pf_ != null)
        {
            this._pf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pf_ = node;
    }

    public TPvirgule getPvirgule()
    {
        return this._pvirgule_;
    }

    public void setPvirgule(TPvirgule node)
    {
        if(this._pvirgule_ != null)
        {
            this._pvirgule_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pvirgule_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ecrire_)
            + toString(this._po_)
            + toString(this._exp_)
            + toString(this._pf_)
            + toString(this._pvirgule_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ecrire_ == child)
        {
            this._ecrire_ = null;
            return;
        }

        if(this._po_ == child)
        {
            this._po_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._pf_ == child)
        {
            this._pf_ = null;
            return;
        }

        if(this._pvirgule_ == child)
        {
            this._pvirgule_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ecrire_ == oldChild)
        {
            setEcrire((TEcrire) newChild);
            return;
        }

        if(this._po_ == oldChild)
        {
            setPo((TPo) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._pf_ == oldChild)
        {
            setPf((TPf) newChild);
            return;
        }

        if(this._pvirgule_ == oldChild)
        {
            setPvirgule((TPvirgule) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
