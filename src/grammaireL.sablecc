Package sc;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];
chiffre = ['0' .. '9'];
alpha = [lettre + ['_' + '$']];
alphanum = [lettre + chiffre];

Tokens

espaces = (' ' | 13 | 10)+;
commentaire= '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);
virgule = ',';
nombre = chiffre+;
co = '[';
cf = ']';
po = '(';
pf = ')';
aco = '{';
acf = '}';
pvirgule =';';
tantque = 'tantque';
faire = 'faire';
si ='si';
alors = 'alors';
sinon = 'sinon';
retourne = 'retour';
ecrire = 'ecrire';
ou = 'ou';
et = 'et';
lire = 'lire';
vrai = 'vrai';
faux = 'faux';

egale = '=';
inf = '<';
plus ='+';
moins ='-';
div = '/';
mult = '*';
non = '!';
entier = 'entier';
boolean = 'boolean';


id = alpha alphanum*;


Ignored Tokens

espaces, commentaire;

Productions

// l'axiome

programme = listedecvar listedecfonc ;

listedecvar = {cas1} decvar listedecvarbis
    | {vide} ;
listedecvarbis = {cas2} virgule decvar listedecvarbis
    | {cas3} ;
decvar = {cas4} typevar id
    | {cas5} typevar id co nombre cf;
typevar = {cas6} entier
    | {cas7} boolean;


listedecfonc = {cas8} decfonc listedecfonc
    | {cas9};

decfonc = typeop id po [premier]:listedecvar pf [second]:listedecvar blocinst ;
typeop = {cas10} typevar
    | {cas11} ;
blocinst = aco listeinst acf ;
listeinst = {cas12} inst listeinst
    |{cas13} ;
inst = {cas14} var exp pvirgule
    | {cas15} tantque exp faire blocinst
    | {cas16} si exp alors blocinst
    | {cas17} si exp alors [premier]:blocinst sinon [second]:blocinst
    | {cas18} retourne exp pvirgule
    | {cas19} id po listeexp pf pvirgule
    | {cas20} ecrire po exp pf pvirgule;


listeexp = {cas21} exp listeexpbis
    | {cas22};
listeexpbis = {cas23} virgule exp listeexpbis
    |{cas24} ;

exp = {cas25} exp ou exp2
    | {cas26} exp2 ;
exp2 = {cas27} exp2 et exp3
    | {cas28} exp3 ;
exp3 = {cas29} exp3 egale exp4
    | {cas30} exp3 inf exp4
    |{cas31} exp4;
exp4 = {cas32} exp4 plus exp5
    |{cas33} exp4 moins exp5
    |{cas34} exp5;
exp5 = {cas35} exp5 div exp6
    | {cas36} exp5 mult exp6
    | {cas37} exp6;
exp6 = {cas38} non exp6
    |{cas39} exp7;
exp7= {cas40} po exp pf
    | {cas41} var
    | {cas42} nombre
    | {cas43} id po listeexp pf
    | {cas44} lire po pf
    | {cas45} vrai
    | {cas46} faux;
var = {cas47} id
    | {cas48} id aco exp acf;



